import axios from 'axios';
import OpenAI from 'openai';

// Initialize OpenAI with API key
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Interface for AI Detection result
export interface AIDetectionResult {
  isAIGenerated: boolean;
  score: number;       // 0-1 score, higher means more likely AI generated
  confidence: string;  // "Low", "Medium", "High"
  details?: string;    // Optional explanation
}

/**
 * Detect if text is AI-generated using GPT's zero API
 * 
 * @param text - The text to analyze
 * @returns Promise with detection result
 */
export async function detectAIContent(text: string): Promise<AIDetectionResult> {
  try {
    if (!text || text.trim().length < 50) {
      return {
        isAIGenerated: false,
        score: 0,
        confidence: "Low",
        details: "Text too short for reliable detection"
      };
    }

    // Truncate very long text to first 4000 characters
    const truncatedText = text.length > 4000 ? text.substring(0, 4000) : text;

    // Use OpenAI's text moderation endpoint which has good AI detection capabilities
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "You are an expert AI content detector. Your task is to determine if the provided text was written by an AI language model or by a human. Analyze the text for patterns typical of AI generation such as repetitive phrasing, unnatural language patterns, lack of personal experiences, or generic content. Provide a score from 0 to 1 where 0 means definitely human-written and 1 means definitely AI-generated."
        },
        {
          role: "user",
          content: `Please analyze the following text and determine if it was likely generated by an AI. Respond with a JSON object containing 'score' (number between 0-1), and 'explanation' (string with your reasoning):\n\n${truncatedText}`
        }
      ],
      response_format: { type: "json_object" }
    });

    // Extract the detection result
    try {
      // Parse the response content, which should be JSON
      const content = response.choices[0].message.content || '{"score":0,"explanation":"Error: No content"}';
      const result = JSON.parse(content);
      
      // Map the score to confidence level
      let confidence = "Medium";
      if (result.score < 0.4) confidence = "Low";
      if (result.score > 0.7) confidence = "High";
      
      return {
        isAIGenerated: result.score > 0.5,
        score: result.score,
        confidence,
        details: result.explanation || result.reasoning || ""
      };
    } catch (error) {
      console.error("Error parsing AI detection result:", error);
      return {
        isAIGenerated: false,
        score: 0,
        confidence: "Low",
        details: "Error processing detection result"
      };
    }
  } catch (error) {
    console.error("Error detecting AI content:", error);
    return {
      isAIGenerated: false,
      score: 0,
      confidence: "Low",
      details: "Detection service unavailable"
    };
  }
}