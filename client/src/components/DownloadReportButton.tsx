import { useState } from "react";
import { Button } from "@/components/ui/button";
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger 
} from "@/components/ui/dropdown-menu";
import { AnalysisResult } from "@/lib/types";
import { generatePdfFromElement } from "@/lib/reportGenerator";
import { useToast } from "@/hooks/use-toast";

// Generate basic HTML report from analysis data
function generateBasicReportHTML(
  result: AnalysisResult, 
  passageATitle: string, 
  passageBTitle: string, 
  isSinglePassageMode: boolean
): string {
  const date = new Date().toLocaleDateString();
  
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Originality Analysis Report</title>
    <style>
        body { font-family: 'Times New Roman', serif; line-height: 1.6; margin: 40px; max-width: 800px; }
        h1 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; margin-top: 25px; }
        .metric { background: #f8f9fa; padding: 15px; margin: 10px 0; border-left: 4px solid #3498db; }
        strong { color: #2c3e50; }
    </style>
</head>
<body>
    <h1>Originality Analysis Report</h1>
    <p><strong>Document:</strong> ${passageATitle || 'Analysis Document'}</p>
    <p><strong>Generated:</strong> ${date}</p>
    <p><strong>Mode:</strong> ${isSinglePassageMode ? 'Single Passage Analysis' : 'Comparative Analysis'}</p>
    
    <h2>Analysis Summary</h2>
    ${(result as any).overallScore ? `<div class="metric"><strong>Overall Originality Score:</strong> <span class="score">${(result as any).overallScore}/100</span></div>` : ''}
    
    ${result.derivativeIndex?.passageA ? `
    <div class="metric">
        <strong>Assessment:</strong> ${result.derivativeIndex.passageA.assessment || 'No assessment available'}
        ${(result.derivativeIndex.passageA as any).strengths ? `<br><strong>Strengths:</strong> ${(result.derivativeIndex.passageA as any).strengths.join(', ')}` : ''}
        ${(result.derivativeIndex.passageA as any).weaknesses ? `<br><strong>Areas for Improvement:</strong> ${(result.derivativeIndex.passageA as any).weaknesses.join(', ')}` : ''}
    </div>` : ''}
    
    ${result.conceptualLineage?.passageA ? `
    <div class="metric">
        <strong>Conceptual Lineage:</strong><br>
        ${result.conceptualLineage.passageA.primaryInfluences ? `<strong>Primary Influences:</strong> ${result.conceptualLineage.passageA.primaryInfluences}<br>` : ''}
        ${result.conceptualLineage.passageA.intellectualTrajectory ? `<strong>Intellectual Trajectory:</strong> ${result.conceptualLineage.passageA.intellectualTrajectory}` : ''}
    </div>` : ''}
    
    ${result.semanticDistance?.passageA ? `
    <div class="metric">
        <strong>Semantic Distance:</strong> <span class="score">${result.semanticDistance.passageA.distance || 'N/A'}/100</span><br>
        <strong>Classification:</strong> ${result.semanticDistance.passageA.label || 'No classification available'}
    </div>` : ''}
    
    ${result.coherence?.passageA ? `
    <div class="metric">
        <strong>Assessment:</strong> ${result.coherence.passageA.assessment || 'No assessment available'}
    </div>` : ''}
    
    ${result.depth?.passageA ? `
    <div class="metric">
        <strong>Assessment:</strong> ${result.depth.passageA.assessment || 'No assessment available'}
    </div>` : ''}
    
    ${result.accuracy?.passageA ? `
    <div class="metric">
        <strong>Assessment:</strong> ${result.accuracy.passageA.assessment || 'No assessment available'}
    </div>` : ''}
    
    ${result.clarity?.passageA ? `
    <div class="metric">
        <strong>Assessment:</strong> ${result.clarity.passageA.assessment || 'No assessment available'}
    </div>` : ''}
    
    ${result.aiDetection?.passageA ? `
    <h2>AI Detection Results</h2>
    <div class="metric">
        <strong>AI Detection:</strong> ${result.aiDetection.passageA.isAIGenerated ? 'Likely AI-generated' : 'Likely human-written'}<br>
        <strong>Confidence:</strong> ${result.aiDetection.passageA.confidence}<br>
        ${result.aiDetection.passageA.details ? `<br><strong>Details:</strong> ${result.aiDetection.passageA.details}` : ''}
    </div>` : ''}
    
    <hr style="margin-top: 40px;">
    <p style="text-align: center; color: #7f8c8d; font-size: 12px;">
        Generated by Originality Meter Analysis System | ${date}
    </p>
</body>
</html>`;
}

interface DownloadReportButtonProps {
  result: AnalysisResult;
  passageATitle: string;
  passageBTitle: string;
  resultsContainerId: string;
  isSinglePassageMode?: boolean;
}

export default function DownloadReportButton({
  result,
  passageATitle,
  passageBTitle,
  resultsContainerId,
  isSinglePassageMode = false
}: DownloadReportButtonProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();
  
  const handleVisualDownload = async () => {
    try {
      setIsGenerating(true);
      toast({
        title: "Generating PDF",
        description: "Please wait while we prepare your report...",
      });
      
      await generatePdfFromElement(
        resultsContainerId,
        passageATitle,
        passageBTitle,
        isSinglePassageMode
      );
      
      toast({
        title: "Download Complete",
        description: "Your analysis report has been downloaded.",
      });
    } catch (err: unknown) {
      const error = err instanceof Error ? err : new Error(String(err));
      console.error("Error generating PDF:", error);
      toast({
        title: "Download Failed",
        description: `Could not generate the PDF report: ${error.message}`,
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleTextDownload = async () => {
    try {
      setIsGenerating(true);
      toast({
        title: "Generating Text Report",
        description: "Please wait while we prepare your text report...",
      });
      
      // Generate basic report content from analysis data
      const reportContent = generateBasicReportHTML(result, passageATitle, passageBTitle, isSinglePassageMode);
      
      // Use the backend download system for reliable PDF generation
      const response = await fetch('/api/download-document', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: reportContent,
          format: 'pdf',
          title: `Originality Analysis Report - ${new Date().toLocaleDateString()}`
        }),
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `analysis-report.pdf`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
        
        toast({
          title: "Download Complete",
          description: "Your analysis report has been downloaded.",
        });
      } else {
        throw new Error('Download failed');
      }
    } catch (err: unknown) {
      const error = err instanceof Error ? err : new Error(String(err));
      console.error("Error generating text report:", error);
      toast({
        title: "Download Failed",
        description: `Could not generate the text report: ${error.message}`,
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          size="lg"
          disabled={isGenerating}
          className="bg-blue-600 hover:bg-blue-700 text-white border-blue-500 border rounded-md px-4 py-2 flex items-center space-x-2 shadow-lg hover:shadow-xl transition-all"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            width="20" 
            height="20" 
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor" 
            strokeWidth="2.5" 
            strokeLinecap="round" 
            strokeLinejoin="round"
            className="mr-2"
          >
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7 10 12 15 17 10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
          <span className="font-bold">Download Report</span>
          {isGenerating && (
            <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin ml-2"></div>
          )}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-48">
        <DropdownMenuItem
          className="cursor-pointer flex items-center" 
          onClick={handleVisualDownload}
          disabled={isGenerating}
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            width="16" 
            height="16" 
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor" 
            strokeWidth="2" 
            strokeLinecap="round" 
            strokeLinejoin="round"
            className="mr-2"
          >
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
            <path d="M14 2v6h6"></path>
            <circle cx="12" cy="14" r="4"></circle>
          </svg>
          Visual Report (PDF)
        </DropdownMenuItem>
        <DropdownMenuItem
          className="cursor-pointer flex items-center" 
          onClick={handleTextDownload}
          disabled={isGenerating}
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            width="16" 
            height="16" 
            viewBox="0 0 24 24" 
            fill="none" 
            stroke="currentColor" 
            strokeWidth="2" 
            strokeLinecap="round" 
            strokeLinejoin="round"
            className="mr-2"
          >
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
            <path d="M14 2v6h6"></path>
            <path d="M16 13H8"></path>
            <path d="M16 17H8"></path>
            <path d="M10 9H8"></path>
          </svg>
          Text-Only Report (PDF)
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}