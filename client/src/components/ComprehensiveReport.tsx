import React, { useState } from "react";
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogDescription,
  DialogFooter,
  DialogClose 
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { AnalysisResult, PassageData } from "@/lib/types";
import { useToast } from "@/hooks/use-toast";
import { jsPDF } from "jspdf";
import { generateComprehensiveReport } from "@/lib/reportGenerator";
import { Spinner } from "./ui/spinner";

interface ComprehensiveReportProps {
  result: AnalysisResult;
  passageA: PassageData;
  passageB?: PassageData;
  isSinglePassageMode?: boolean;
}

const ComprehensiveReport: React.FC<ComprehensiveReportProps> = ({
  result,
  passageA,
  passageB,
  isSinglePassageMode = false
}) => {
  const [open, setOpen] = useState(false);
  const [activeTab, setActiveTab] = useState("summary");
  const [isGenerating, setIsGenerating] = useState(false);
  const [reportData, setReportData] = useState<any>(null);
  const { toast } = useToast();

  const handleOpenReport = async () => {
    setOpen(true);
    
    if (!reportData) {
      setIsGenerating(true);
      try {
        // Generate comprehensive report data
        const report = await generateComprehensiveReport(
          result,
          passageA,
          passageB,
          isSinglePassageMode
        );
        setReportData(report);
      } catch (error) {
        console.error("Error generating comprehensive report:", error);
        toast({
          title: "Error",
          description: "Failed to generate comprehensive report. Please try again.",
          variant: "destructive"
        });
      } finally {
        setIsGenerating(false);
      }
    }
  };

  const handleDownloadPdf = () => {
    if (!reportData) return;

    try {
      setIsGenerating(true);
      toast({
        title: "Generating PDF",
        description: "Please wait while we prepare your comprehensive report...",
      });

      const doc = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      });

      // Set font styles
      doc.setFont("helvetica", "normal");
      doc.setFontSize(20);

      // Title
      const title = isSinglePassageMode 
        ? `Comprehensive Analysis: ${passageA.title || "Untitled Document"}`
        : `Comparative Analysis: ${passageA.title || "Document A"} & ${passageB?.title || "Document B"}`;
      
      doc.text(title, 15, 20);
      doc.setFontSize(12);
      doc.setTextColor(100, 100, 100);
      doc.text("Generated by Originality Meter", 15, 28);
      doc.setTextColor(0, 0, 0);

      // Current date
      const date = new Date().toLocaleDateString();
      doc.text(`Report Date: ${date}`, 15, 35);
      doc.line(15, 40, 195, 40);

      let yPosition = 45;
      
      // Add report sections
      doc.setFontSize(16);
      doc.text("Executive Summary", 15, yPosition += 10);
      doc.setFontSize(11);
      
      // Format and add summary text with word wrapping
      const summaryLines = doc.splitTextToSize(reportData.summary, 180);
      doc.text(summaryLines, 15, yPosition += 8);
      
      yPosition += (summaryLines.length * 5) + 10;

      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }

      // Analysis Scores Section
      doc.setFontSize(16);
      doc.text("Analysis Scores & Justifications", 15, yPosition += 10);
      doc.setFontSize(11);

      Object.entries(reportData.scores).forEach(([key, data]: [string, any]) => {
        // Check if we need a new page
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }

        // Score category
        doc.setFontSize(13);
        doc.setTextColor(0, 0, 150);
        doc.text(data.label, 15, yPosition += 10);
        doc.setTextColor(0, 0, 0);
        doc.setFontSize(11);
        
        // Score value
        doc.text(`Score: ${data.score}/10`, 15, yPosition += 7);
        
        // Justification
        const justificationLines = doc.splitTextToSize(data.justification, 180);
        doc.text(justificationLines, 15, yPosition += 7);
        
        // Supporting quotes
        if (data.quotes && data.quotes.length > 0) {
          doc.setFontSize(10);
          doc.setTextColor(80, 80, 80);
          
          data.quotes.forEach((quote: string, i: number) => {
            // Check if we need a new page
            if (yPosition > 270) {
              doc.addPage();
              yPosition = 20;
            }
            
            const quoteLines = doc.splitTextToSize(`Quote ${i+1}: "${quote}"`, 175);
            doc.text(quoteLines, 20, yPosition += 7);
            yPosition += (quoteLines.length - 1) * 5;
          });
          
          doc.setTextColor(0, 0, 0);
          doc.setFontSize(11);
        }
        
        yPosition += 5;
      });

      // Add Strengths & Weaknesses
      if (yPosition > 240) {
        doc.addPage();
        yPosition = 20;
      }

      // Strengths Section
      doc.setFontSize(16);
      doc.text("Strengths", 15, yPosition += 15);
      doc.setFontSize(11);
      
      reportData.strengths.forEach((strength: string, i: number) => {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        
        const strengthLines = doc.splitTextToSize(`• ${strength}`, 180);
        doc.text(strengthLines, 15, yPosition += 8);
        yPosition += (strengthLines.length - 1) * 5;
      });

      // Weaknesses Section
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }
      
      doc.setFontSize(16);
      doc.text("Weaknesses", 15, yPosition += 15);
      doc.setFontSize(11);
      
      reportData.weaknesses.forEach((weakness: string, i: number) => {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        
        const weaknessLines = doc.splitTextToSize(`• ${weakness}`, 180);
        doc.text(weaknessLines, 15, yPosition += 8);
        yPosition += (weaknessLines.length - 1) * 5;
      });

      // Improvement Suggestions
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }
      
      doc.setFontSize(16);
      doc.text("Improvement Suggestions", 15, yPosition += 15);
      doc.setFontSize(11);
      
      reportData.improvements.forEach((improvement: string, i: number) => {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        
        const improvementLines = doc.splitTextToSize(`${i+1}. ${improvement}`, 180);
        doc.text(improvementLines, 15, yPosition += 8);
        yPosition += (improvementLines.length - 1) * 5;
      });

      // Literature Context (if available)
      if (reportData.literatureContext && reportData.literatureContext.length > 0) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }
        
        doc.setFontSize(16);
        doc.text("Literature Context", 15, yPosition += 15);
        doc.setFontSize(11);
        
        const contextLines = doc.splitTextToSize(reportData.literatureContext, 180);
        doc.text(contextLines, 15, yPosition += 8);
      }

      // Save the PDF
      const fileName = isSinglePassageMode 
        ? `${passageA.title || "document"}_comprehensive_report.pdf` 
        : `comparative_analysis_report.pdf`;
        
      doc.save(fileName);

      toast({
        title: "Download Complete",
        description: "Your comprehensive report has been downloaded as a PDF.",
      });
    } catch (error) {
      console.error("Error generating PDF:", error);
      toast({
        title: "Error",
        description: "Failed to generate PDF. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDownloadWord = () => {
    if (!reportData) return;

    try {
      setIsGenerating(true);
      toast({
        title: "Generating Word Document",
        description: "Please wait while we prepare your comprehensive report...",
      });

      // Create HTML content for Word document
      let htmlContent = `
        <html xmlns:o='urn:schemas-microsoft-com:office:office' 
              xmlns:w='urn:schemas-microsoft-com:office:word' 
              xmlns='http://www.w3.org/TR/REC-html40'>
        <head>
          <meta charset="utf-8">
          <title>Comprehensive Analysis Report</title>
          <style>
            body { font-family: 'Calibri', sans-serif; }
            h1 { color: #2D5B89; font-size: 20pt; }
            h2 { color: #2D5B89; font-size: 16pt; margin-top: 20pt; }
            h3 { color: #5783B4; font-size: 14pt; }
            .subtitle { color: #666666; font-size: 11pt; }
            .date { margin-bottom: 20pt; }
            .score { font-weight: bold; }
            .quote { color: #555; margin-left: 20pt; font-style: italic; }
            .list-item { margin: 8pt 0; }
          </style>
        </head>
        <body>
          <h1>${isSinglePassageMode 
            ? `Comprehensive Analysis: ${passageA.title || "Untitled Document"}`
            : `Comparative Analysis: ${passageA.title || "Document A"} & ${passageB?.title || "Document B"}`}</h1>
          <p class="subtitle">Generated by Originality Meter</p>
          <p class="date">Report Date: ${new Date().toLocaleDateString()}</p>
          
          <h2>Executive Summary</h2>
          <p>${reportData.summary}</p>
          
          <h2>Analysis Scores & Justifications</h2>`;

      // Add scores and justifications
      Object.entries(reportData.scores).forEach(([key, data]: [string, any]) => {
        htmlContent += `
          <h3>${data.label}</h3>
          <p class="score">Score: ${data.score}/10</p>
          <p>${data.justification}</p>`;
          
        if (data.quotes && data.quotes.length > 0) {
          data.quotes.forEach((quote: string, i: number) => {
            htmlContent += `<p class="quote">Quote ${i+1}: "${quote}"</p>`;
          });
        }
      });

      // Add strengths
      htmlContent += `<h2>Strengths</h2><ul>`;
      reportData.strengths.forEach((strength: string) => {
        htmlContent += `<li class="list-item">${strength}</li>`;
      });
      htmlContent += `</ul>`;

      // Add weaknesses
      htmlContent += `<h2>Weaknesses</h2><ul>`;
      reportData.weaknesses.forEach((weakness: string) => {
        htmlContent += `<li class="list-item">${weakness}</li>`;
      });
      htmlContent += `</ul>`;

      // Add improvement suggestions
      htmlContent += `<h2>Improvement Suggestions</h2><ol>`;
      reportData.improvements.forEach((improvement: string) => {
        htmlContent += `<li class="list-item">${improvement}</li>`;
      });
      htmlContent += `</ol>`;

      // Add literature context if available
      if (reportData.literatureContext && reportData.literatureContext.length > 0) {
        htmlContent += `
          <h2>Literature Context</h2>
          <p>${reportData.literatureContext}</p>`;
      }

      htmlContent += `
        </body>
        </html>`;

      // Create a Blob with the HTML content
      const blob = new Blob([htmlContent], { type: 'application/msword' });
      const url = URL.createObjectURL(blob);
      
      // Create a download link and click it
      const link = document.createElement('a');
      link.href = url;
      
      const fileName = isSinglePassageMode 
        ? `${passageA.title || "document"}_comprehensive_report.doc` 
        : `comparative_analysis_report.doc`;
        
      link.download = fileName;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      toast({
        title: "Download Complete",
        description: "Your comprehensive report has been downloaded as a Word document.",
      });
    } catch (error) {
      console.error("Error generating Word document:", error);
      toast({
        title: "Error",
        description: "Failed to generate Word document. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <>
      <Button 
        onClick={handleOpenReport}
        variant="outline"
        className="bg-green-600 hover:bg-green-700 text-white border-green-500 border rounded-md px-4 py-2 flex items-center shadow-lg hover:shadow-xl transition-all"
      >
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="20" 
          height="20" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round"
          className="mr-2"
        >
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
          <polyline points="14 2 14 8 20 8"></polyline>
          <line x1="16" y1="13" x2="8" y2="13"></line>
          <line x1="16" y1="17" x2="8" y2="17"></line>
          <polyline points="10 9 9 9 8 9"></polyline>
        </svg>
        <span className="font-medium">View Comprehensive Report</span>
      </Button>

      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-2xl font-bold">
              {isSinglePassageMode 
                ? `Comprehensive Analysis: ${passageA.title || "Untitled Document"}` 
                : `Comparative Analysis: ${passageA.title || "Document A"} & ${passageB?.title || "Document B"}`}
            </DialogTitle>
            <DialogDescription>
              Detailed analysis report with scores, justifications, strengths & weaknesses, and improvement suggestions
            </DialogDescription>
          </DialogHeader>

          {isGenerating ? (
            <div className="flex flex-col items-center justify-center py-10">
              <Spinner size="lg" />
              <p className="mt-4 text-muted-foreground">Generating comprehensive report...</p>
            </div>
          ) : reportData ? (
            <>
              <Tabs defaultValue="summary" className="w-full" value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid grid-cols-4">
                  <TabsTrigger value="summary">Summary</TabsTrigger>
                  <TabsTrigger value="scores">Scores & Justifications</TabsTrigger>
                  <TabsTrigger value="strengths">Strengths & Weaknesses</TabsTrigger>
                  <TabsTrigger value="improvements">Improvements</TabsTrigger>
                </TabsList>
                
                <TabsContent value="summary" className="p-4">
                  <h3 className="text-xl font-semibold mb-4">Executive Summary</h3>
                  <p className="text-base leading-relaxed whitespace-pre-line">{reportData.summary}</p>
                  
                  {reportData.literatureContext && (
                    <>
                      <h3 className="text-xl font-semibold mt-8 mb-4">Literature Context</h3>
                      <p className="text-base leading-relaxed whitespace-pre-line">{reportData.literatureContext}</p>
                    </>
                  )}
                </TabsContent>
                
                <TabsContent value="scores" className="p-4">
                  <h3 className="text-xl font-semibold mb-4">Analysis Scores & Justifications</h3>
                  
                  <div className="space-y-6">
                    {Object.entries(reportData.scores).map(([key, data]: [string, any]) => (
                      <div key={key} className="border rounded-lg p-4 bg-slate-50">
                        <h4 className="text-lg font-semibold text-blue-700">{data.label}</h4>
                        <p className="font-medium my-2">Score: {data.score}/10</p>
                        <p className="text-base mb-3">{data.justification}</p>
                        
                        {data.quotes && data.quotes.length > 0 && (
                          <div className="mt-3">
                            <h5 className="text-sm font-medium text-slate-700 mb-2">Supporting Quotes:</h5>
                            <div className="space-y-2 ml-4">
                              {data.quotes.map((quote: string, i: number) => (
                                <p key={i} className="text-sm italic border-l-2 border-slate-300 pl-3 py-1 bg-slate-100 rounded-r-sm">
                                  "{quote}"
                                </p>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </TabsContent>
                
                <TabsContent value="strengths" className="p-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h3 className="text-xl font-semibold mb-4 text-green-700">Strengths</h3>
                      <ul className="space-y-2 list-disc list-inside">
                        {reportData.strengths.map((strength: string, i: number) => (
                          <li key={i} className="text-base leading-relaxed">{strength}</li>
                        ))}
                      </ul>
                    </div>
                    
                    <div>
                      <h3 className="text-xl font-semibold mb-4 text-red-700">Weaknesses</h3>
                      <ul className="space-y-2 list-disc list-inside">
                        {reportData.weaknesses.map((weakness: string, i: number) => (
                          <li key={i} className="text-base leading-relaxed">{weakness}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </TabsContent>
                
                <TabsContent value="improvements" className="p-4">
                  <h3 className="text-xl font-semibold mb-4">Improvement Suggestions</h3>
                  <ol className="space-y-3 list-decimal list-inside">
                    {reportData.improvements.map((improvement: string, i: number) => (
                      <li key={i} className="text-base leading-relaxed">{improvement}</li>
                    ))}
                  </ol>
                </TabsContent>
              </Tabs>
            </>
          ) : (
            <div className="flex items-center justify-center py-10">
              <p className="text-muted-foreground">No report data available</p>
            </div>
          )}

          <DialogFooter className="flex justify-between items-center mt-4">
            <div className="flex space-x-3">
              <Button 
                variant="outline" 
                onClick={handleDownloadPdf}
                disabled={isGenerating || !reportData}
                className="flex items-center"
              >
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  width="16" 
                  height="16" 
                  viewBox="0 0 24 24" 
                  fill="none" 
                  stroke="currentColor" 
                  strokeWidth="2" 
                  strokeLinecap="round" 
                  strokeLinejoin="round"
                  className="mr-2"
                >
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <rect x="8" y="12" width="8" height="2"></rect>
                </svg>
                Download as PDF
              </Button>
              
              <Button 
                variant="outline" 
                onClick={handleDownloadWord}
                disabled={isGenerating || !reportData}
                className="flex items-center"
              >
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  width="16" 
                  height="16" 
                  viewBox="0 0 24 24" 
                  fill="none" 
                  stroke="currentColor" 
                  strokeWidth="2" 
                  strokeLinecap="round" 
                  strokeLinejoin="round"
                  className="mr-2"
                >
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <path d="M16 13H8"></path>
                  <path d="M16 17H8"></path>
                  <path d="M10 9H8"></path>
                </svg>
                Download as Word
              </Button>
            </div>
            
            <DialogClose asChild>
              <Button variant="secondary">Close</Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default ComprehensiveReport;