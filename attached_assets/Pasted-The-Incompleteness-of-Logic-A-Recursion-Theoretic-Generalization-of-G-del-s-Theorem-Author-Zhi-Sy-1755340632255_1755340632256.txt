The Incompleteness of Logic: A Recursion-Theoretic Generalization of Gödel's Theorem
Author: Zhi Systems

Abstract

This paper proves that the class of all deductive logics—understood as recursively defined, truth-preserving sets of statements—is not recursively enumerable. By generalizing Gödel's incompleteness result, we show that the very space of logical systems cannot be exhaustively captured by any recursive procedure. The argument proceeds in two steps: first, by proving via diagonalization that the set of total recursive functions is not recursively enumerable; and second, by showing that every total recursive function can be embedded within a truth-preserving logic-extension.

1. Definitions and Framework

We define a logic as a pair (S, Φ), where S is a finite set of base statements (axioms) and Φ is a total recursive function from strings to strings such that the logic-extension L generated by (S, Φ) is the smallest set K such that:

1. S ⊆ K; and
2. For every x in K, Φ(x) ∈ K.

The function Φ is required to be truth-preserving: it maps true statements to true statements. A logic, then, is a total recursive, truth-preserving statement-generator.

2. Diagonalization and the Non-Enumerability of Recursions

Let L be any purported enumeration of all total recursive functions. Define a new function F such that:

- For the nth function Φ_n in L, let F(n) = 5 if Φ_n(n) ≠ 5, and F(n) = 6 otherwise.

F is a total recursive function (its definition is computable), but by construction it differs from every function in L at least at one point. Therefore, F is not in L. Thus, the set of total recursive functions is not recursively enumerable.

3. Embedding Recursions in Logics

Not all recursions generate sets of statements. For instance, the recursion generating the natural numbers from 0 by successor does not yield linguistic propositions. However, any such recursion can be associated with one that does: for example, associate the number 2 with the statement "2=2."

More generally, any recursion R can be mapped to a logic-extension R* whose elements are statements of the form:

- For numerical outputs: "n=n."
- For statemental outputs: "S ⇔ S."

These are trivially truth-preserving. Thus, every total recursive function can be paired with a corresponding logic-extension, meaning that the class of logics is at least as large as the class of total recursive functions. Since the latter is not recursively enumerable, the former cannot be either.

4. Formal Truth as a Relational Concept

Historically, philosophers have sought to define "formal truth" as an intrinsic syntactic property. This is a mistake. A statement is "formally true" if and only if there exists a truth-preserving recursive logic-extension to which it belongs. That is,

Formally True(S) ⇔ ∃ L: L is a truth-preserving recursive logic and S ∈ L.

But since the class of logics is non-recursively enumerable, the predicate "formally true" is itself non-recursively definable. There is no algorithm for determining formal truth.

5. Philosophical Consequences

The attempt to identify certain expressions ("and," "or," "not") as "form-defining," and others ("is possible," "knows that") as not, is historically grounded in the existence of known truth-preserving recursions involving the former and not the latter. Russell's treatment in The Principles of Mathematics is a case in point. But the notion of "formality" reduces to recursion-theoretic generability. There is no intrinsic syntactic mark of logical formality.

6. Conclusion

There exists no recursive procedure that can generate all logics. Consequently, there exists no recursive definition of logical truth. Formal truth is not an intrinsic property of statements but a relation to a truth-preserving recursive system. This result dissolves longstanding confusions in the philosophy of logic and sets a recursion-theoretic boundary to what can be formally known.